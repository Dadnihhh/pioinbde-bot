from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from datetime import datetime
import pytz
from flask import Flask
from threading import Thread
import os

# Token do Telegram e ID do grupo
TOKEN = "7492540959:AAFatZvdk1gN2y5UD-AkQUJt_b6P5yqE-_4"
CHAT_ID_GRUPO = -1001234567890  # Substitua pelo seu ID de grupo real

# Lista de perguntas do dia
perguntas = []

# Controle de usu√°rios que j√° mandaram pergunta hoje
usuarios_hoje = {}

# Hor√°rio permitido (Bras√≠lia)
HORA_INICIO = 7
HORA_FIM = 22
HORARIO_ATIVO = False
TZ_BR = pytz.timezone("America/Sao_Paulo")

# Lista de admins autorizados
ADMINS_AUTORIZADOS = ["antoniomcpio"]  # sem @

# Mensagens
MENSAGEM_AVISO = f"‚è∞ Perguntas s√≥ podem ser enviadas de segunda a sexta, das {HORA_INICIO}:00 √†s {HORA_FIM}:00 (hor√°rio de Bras√≠lia)"
MENSAGEM_BOAS_VINDAS = """üëã Ol√°! Eu sou o Bot Admin da **Comunidade Pio INBDE**.

üéØ **Como funciona:**
‚Ä¢ Use o comando `/pergunta` seguido da sua d√∫vida
‚Ä¢ Sua pergunta ser√° enviada para o Prof. Antonio Pio no grupo da comunidade
‚Ä¢ Hor√°rio: Segunda a sexta, das 7h √†s 22h (Bras√≠lia)
‚Ä¢ Limite: 1 pergunta por pessoa por dia

üìö **Exemplo:**
`/pergunta Como calcular a resist√™ncia de um material?`

‚úÖ Sua pergunta chegar√° ao professor e ser√° respondida no grupo oficial!"""

# ============================
# Fun√ß√µes auxiliares
# ============================
def is_admin(user):
    username = user.username
    return username and username.lower() in [admin.lower() for admin in ADMINS_AUTORIZADOS]

def reset_dia():
    global usuarios_hoje, perguntas
    agora = datetime.now(TZ_BR)
    if usuarios_hoje.get("data") != agora.date():
        usuarios_hoje = {"data": agora.date()}
        perguntas.clear()

# ============================
# Comando /pergunta
# ============================
async def nova_pergunta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_dia()
    if update.message.chat.type not in ["group", "supergroup"]:
        return

    texto = " ".join(context.args)
    if not texto:
        await update.message.reply_text("‚ùå Por favor, escreva sua pergunta depois do comando /pergunta")
        return

    agora = datetime.now(TZ_BR)
    user_id = update.message.from_user.id
    nome = update.message.from_user.first_name

    if len(perguntas) >= 10:
        await update.message.reply_text("‚ö†Ô∏è O limite de 10 perguntas de hoje j√° foi atingido.")
        return

    if user_id in usuarios_hoje:
        await update.message.reply_text("‚ö†Ô∏è Voc√™ j√° enviou uma pergunta hoje. Tente novamente amanh√£.")
        return

    hora_atual = agora.hour
    dia_semana = agora.weekday()

    if HORARIO_ATIVO:
        if not (0 <= dia_semana <= 4 and HORA_INICIO <= hora_atual < HORA_FIM):
            await update.message.reply_text(MENSAGEM_AVISO)
            return

    perguntas.append((nome, texto, agora.strftime("%H:%M")))
    usuarios_hoje[user_id] = True
    await update.message.reply_text("‚úÖ Pergunta registrada com sucesso!\n\nüì© Sua pergunta foi enviada para o Prof. Antonio Pio na Comunidade Pio INBDE.")

# ============================
# Comando /start
# ============================
async def start_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return

    user = update.message.from_user
    if is_admin(user):
        await update.message.reply_text(f"üë®‚Äçüè´ Ol√° Professor {user.first_name}! Voc√™ tem acesso administrativo.\n\nUse `/listar` para ver as perguntas recebidas.", parse_mode="Markdown")
    else:
        await update.message.reply_text(MENSAGEM_BOAS_VINDAS, parse_mode="Markdown")

# ============================
# Comando /listar (admins)
# ============================
async def listar_perguntas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    user = update.message.from_user
    if not is_admin(user):
        await update.message.reply_text(MENSAGEM_BOAS_VINDAS, parse_mode="Markdown")
        return

    reset_dia()

    if perguntas:
        mensagem = "üìã *Perguntas recebidas hoje:*\n\n"
        for i, (nome, pergunta, hora) in enumerate(perguntas, 1):
            mensagem += f"{i}. üë§ *{nome}* ({hora})\n   üí¨ {pergunta}\n\n"
        mensagem += f"\nüìä Total: {len(perguntas)}/10 perguntas\nüë• Usu√°rios: {len([k for k in usuarios_hoje.keys() if k != 'data'])}"
        await update.message.reply_text(mensagem, parse_mode="Markdown")
    else:
        await update.message.reply_text("üìã Nenhuma pergunta registrada hoje.\nüìä Status: 0/10 perguntas")

# ============================
# Comando /responder (apenas admins)
# ============================
SELECIONAR, RESPOSTA = range(2)
resposta_atual = {}

async def responder_inicio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if not is_admin(user):
        await update.message.reply_text("‚ùå Apenas admins podem usar este comando.")
        return ConversationHandler.END

    reset_dia()
    if not perguntas:
        await update.message.reply_text("‚ö†Ô∏è N√£o h√° perguntas para responder hoje.")
        return ConversationHandler.END

    mensagem = "üìù Selecione o n√∫mero da pergunta que deseja responder:\n\n"
    for i, (nome, pergunta, hora) in enumerate(perguntas, 1):
        mensagem += f"{i}. üë§ {nome} ({hora}) - {pergunta}\n"
    await update.message.reply_text(mensagem)
    return SELECIONAR

async def selecionar_pergunta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        indice = int(update.message.text) - 1
        if not (0 <= indice < len(perguntas)):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå N√∫mero inv√°lido. Tente novamente.")
        return SELECIONAR

    context.user_data["responder_indice"] = indice
    context.user_data["resposta_msgs"] = []
    await update.message.reply_text("‚úÖ Pergunta selecionada. Agora envie a resposta (texto, imagens ou v√≠deos). Quando terminar, use /fimresponder")
    return RESPOSTA

async def registrar_resposta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["resposta_msgs"].append(update.message)
    return RESPOSTA

async def fim_responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if not is_admin(user):
        return ConversationHandler.END

    indice = context.user_data.get("responder_indice")
    if indice is None:
        await update.message.reply_text("‚ùå Nenhuma pergunta selecionada.")
        return ConversationHandler.END

    pergunta_info = perguntas[indice]
    mensagem_final = f"üìå *Pergunta:* {pergunta_info[1]}\nüë§ Pergunta por: {pergunta_info[0]} ({pergunta_info[2]})\n\n*Resposta:*"

    mensagens = context.user_data.get("resposta_msgs", [])
    texto_resposta = ""
    media = []
    for msg in mensagens:
        if msg.text:
            texto_resposta += f"{msg.text}\n"
        if msg.photo:
            media.append(InputMediaPhoto(msg.photo[-1].file_id))
        if msg.video:
            media.append(InputMediaVideo(msg.video.file_id))

    app = context.application
    if media:
        await app.bot.send_message(chat_id=CHAT_ID_GRUPO, text=mensagem_final + "\n" + texto_resposta)
        await app.bot.send_media_group(chat_id=CHAT_ID_GRUPO, media=media)
    else:
        await app.bot.send_message(chat_id=CHAT_ID_GRUPO, text=mensagem_final + "\n" + texto_resposta)

    await update.message.reply_text("‚úÖ Resposta enviada com sucesso!")
    return ConversationHandler.END

# ============================
# Flask para uptime
# ============================
app_flask = Flask(__name__)

@app_flask.route("/")
def home():
    return "ü§ñ Bot Telegram est√° rodando!"

def run_flask():
    app_flask.run(host="0.0.0.0", port=5000)

# ============================
# Fun√ß√£o principal
# ============================
def main():
    Thread(target=run_flask, daemon=True).start()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_comando))
    app.add_handler(CommandHandler("pergunta", nova_pergunta))
    app.add_handler(CommandHandler("listar", listar_perguntas))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("responder", responder_inicio)],
        states={
            SELECIONAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, selecionar_pergunta)],
            RESPOSTA: [MessageHandler(filters.ALL & ~filters.COMMAND, registrar_resposta)],
        },
        fallbacks=[CommandHandler("fimresponder", fim_responder)],
    )
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
